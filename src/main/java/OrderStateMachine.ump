namespace ca.mcgill.ecse.coolsupplies.model;

class Order {
  OrderStatus {
    Started {
      updateOrder(PurchaseLevel level, Student student) [isChildOfParent(student)] / {
        setLevel(level);
        setStudent(student);
      }
      -> Started;
      updateOrder(PurchaseLevel level, Student student) [!isChildOfParent(student)] / {
        throw new Error("Student " + student.name + " is not a child of the parent " + parent.email + ".");
      }
      -> Started;
      addItem(InventoryItem item, int quantity) [!inventoryItemIsInOrder(item) && quantity > 0] / {
        addOrderItem(quantity, coolSupplies, item);
      }
      -> Started;
      addItem(InventoryItem item, int quantity) [quantity <= 0] / {
        throw new Error("Quantity must be greater than 0.");
      }
      -> Started;
      addItem(InventoryItem item, int quantity) [inventoryItemIsInOrder(item)] / {
        throw new Error("Item " + item.name + " already exists in the order " + order.number + ".");
      }
      -> Started;
      updateItem(OrderItem item, int quantity) [quantity > 0] / {
        item.setQuantity(quantity);
      }
      -> Started;
      updateItem(OrderItem item, int quantity) [quantity <= 0] / {
        throw new Error("Quantity must be greater than 0.");
      }
      -> Started;
      deleteItem(OrderItem item) [itemIsInOrder(item)] / {
        item.delete();
      }
      -> Started;
      deleteItem(OrderItem item) [!itemIsInOrder(item)] / {
        throw new Error("Item " + item.name + " does not exist in the order " + order.number + ".");
      }
      -> Started;
      pay(String authorizationCode) [authorizationCodeIsValid(authorizationCode)] / {
        SetAuthorizationCode(authorizationCode);
      }
      -> Paid;
      pay(String authorizationCode) [!authorizationCodeIsValid(authorizationCode)] / {
        throw new Error("Authorization code is invalid");
      }
      -> Paid;
      startSchoolYear() -> Penalized;
      cancelOrder() -> Final;
    }
    Paid {
      cancelOrder() -> Final;
      startSchoolYear() -> Prepared;
    }
    Penalized {
      payPenalty(String authorizationCode, String penaltyAuthCode) [authorizationCodeIsValid(authorizationCode) && penaltyAuthCodeIsValid(penaltyAuthCode)] / {
        SetAuthorizationCode(authorizationCode);
        SetPenaltyAuthCode(penaltyAuthCode);
      }
      -> Prepared;
      payPenalty(String authorizationCode, String penaltyAuthCode) [!authorizationCodeIsValid(authorizationCode)] / {
        throw new Error("Authorization code is invalid");
      }
      -> Penalized;
      payPenalty(String authorizationCode, String penaltyAuthCode) [!penaltyAuthCodeIsValid(penaltyAuthCode)] / {
        throw new Error("Penalty authorization code is invalid");
      }
      -> Penalized;
    }
    Prepared {
      pickUp() -> PickedUp;
    }
    PickedUp {
    }
  }
}